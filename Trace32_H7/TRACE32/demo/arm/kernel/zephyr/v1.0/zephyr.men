; --------------------------------------------------------------------------------
; @Title: Zephyr specific menu
; @Description: -
; @Author: DIE
; @Copyright: (c) 1989-2022 Lauterbach GmbH, licensed for use with TRACE32(R) only
; --------------------------------------------------------------------------------
; $Id: zephyr.m 7861 2022-07-29 13:45:42Z amerkle $

NAME "TASK.ZEPHYR"

IF !MENU.EXIST("TASK.ZEPHYR")
(

ADD
MENU
(
  POPUP "Zephyr"
  (
    default
    menuitem "Display &Contexts"    "TASK.Context"
    popup "&Nanokernel"
    (
      menuitem "Display &Fibers"    "TASK.Fiber"
      menuitem "Display &Semaphore"
      (
        dialog
        (
          header "Display Semaphore"
          pos 0. 0. 22. 3.
          box "nano_sem variable:"
          pos 1. 1. 20. 1.
semname:  defedit "" ""
          pos 3. 3. 7.
          defbutton "Ok"
          (
            PRIVATE &semname
            &semname=dialog.string(semname)
            TASK.NanoSem "&semname"
            dialog.end
          )
          pos 12. 3. 7.
          button "Cancel"
          (
            dialog.end
          )
        )
      )
      menuitem "Display &Fifos"
      (
        dialog
        (
          header "Display Fifo"
          pos 0. 0. 22. 3.
          box "nano_fifo variable:"
          pos 1. 1. 20. 1.
fifoname: defedit "" ""
          pos 3. 3. 7.
          defbutton "Ok"
          (
            PRIVATE &fifoname
            &fifoname=dialog.string(fifoname)
            TASK.NanoFifo "&fifoname"
            dialog.end
          )
          pos 12. 3. 7.
          button "Cancel"
          (
            dialog.end
          )
        )
      )
      menuitem "Display &Lifos"
      (
        dialog
        (
          header "Display Lifo"
          pos 0. 0. 22. 3.
          box "nano_lifo variable:"
          pos 1. 1. 20. 1.
lifoname: defedit "" ""
          pos 3. 3. 7.
          defbutton "Ok"
          (
            PRIVATE &lifoname
            &lifoname=dialog.string(lifoname)
            TASK.NanoLifo "&lifoname"
            dialog.end
          )
          pos 12. 3. 7.
          button "Cancel"
          (
            dialog.end
          )
        )
      )
      menuitem "Display &Stacks"
      (
        dialog
        (
          header "Display Stack"
          pos 0. 0. 22. 3.
          box "nano_stack variable:"
          pos 1. 1. 20. 1.
stkname:  defedit "" ""
          pos 3. 3. 7.
          defbutton "Ok"
          (
            PRIVATE &stkname
            &stkname=dialog.string(stkname)
            TASK.NanoSTacK "&stkname"
            dialog.end
          )
          pos 12. 3. 7.
          button "Cancel"
          (
            dialog.end
          )
        )
      )
    )
    popup "&Microkernel"
    (
      menuitem "Display &Tasks"         "TASK.Task"
      menuitem "Display &Fifos"         "TASK.Fifo"
      menuitem "Display &Mailboxes"     "TASK.MailBoX"
      menuitem "Display &Semaphores"    "TASK.Semaphore"
      menuitem "Display &Events"        "TASK.Event"
      menuitem "Display &Mutexes"       "TASK.MuTeX"
      menuitem "Display &Memory Maps"   "TASK.Map"
      menuitem "Display &Memory Pools"  "TASK.Pool"
      menuitem "Display &Timers"        "TASK.TIMer"
      menuitem "Display &Pipes"         "TASK.PIPE"
    )
    separator
    popup "&Stack Coverage"
    (
      menuitem "&List Stacks"    "TASK.STacK.view"
      menuitem "Add Task"        "TASK.STacK.ADD"
      menuitem "Remove Task"     "TASK.STacK.RM"
      menuitem "Reset Coverage"
      (
        PRIVATE &yes
        DIALOG.YESNO "Overwrite unused stack space" "with stack fill pattern?"
        ENTRY &yes
        IF !&yes
          ENDDO
        TASK.STacK.Init
      )
    )
  )
  popup "Trace"
  (
    popup "[:alist]List"
    (
      separator
      menuitem "&Task Switches"     "Trace.List List.TASK"
      menuitem "&Default and Tasks" "Trace.List List.TASK DEFault"
    )
  )
  popup "Perf"
  (
    separator
    popup "&Task Runtime"
    (
      menuitem "&Prepare"
      (
        if t.method.analyzer()
        (
          Analyzer.AutoInit on
        )
        if trace.flow()
        (
          Break.Delete /TraceEnable
          Break.Set task.config(magic) /Write /TraceEnable
        )
        Trace.Init
      )
      menuitem "[:perf]Show &Numerical"   "Trace.STATistic.TASK"
      menuitem "[:achart]Show as &Timing" "Trace.CHART.TASK"
      menuitem "[:achart]Tracking with Trace &List"
      (
        Trace.List List.TASK DEFault /Track
        Trace.CHART.TASK /Track
      )
    )
    popup "Task &Function Runtime"
    (
      menuitem "&Prepare"
      (
        if t.method.analyzer()
        (
          Analyzer.AutoInit on
          Analyzer.STATistic.PreFetch on
        )
        if trace.flow()
        (
          Break.Delete /TraceData
          Break.Set task.config(magic) /Write /TraceData
        )
        Trace.Init
      )
      menuitem "[:perf]Show &Numerical"     "Trace.STATistic.TASKFUNC"
      menuitem "[:perf]Show as &Tree"       "Trace.STATistic.TASKTREE"
      menuitem "[:perf]Show &Detailed Tree" "Trace.STATistic.TASKTREE ALL"
      menuitem "[:achart]Show as &Timing"   "Trace.CHART.TASKFUNC"
      menuitem "[:alist]Show N&esting"      "Trace.List List.TASK FUNC TI.FUNC"
    )
    popup "Task &Status"
    (
      menuitem "&Prepare"
      (
        if t.method.analyzer()
        (
          Analyzer.AutoInit on
        )
      )
      menuitem "[:perf]Show &Numerical"   "Trace.STATistic.TASKSTATE"
      menuitem "[:achart]Show as &Timing" "Trace.CHART.TASKSTATE"
      menuitem "[:achart]Tracking with Trace &List"
      (
        Trace.List List.TASK DEFault /Track
        Trace.CHART.TASKSTATE /Track
      )
    )
  )
  popup "&Help"
  (
    MENUITEM "[:manual]OS Awareness Manual Zephyr" "HELP __RTOS_ZEPHYR_"
  )
)


menu "task.c"
(
  default
  ;menuitem "Display detailed"
  ;(
  ;  &address=address.offset(track.address())
  ;  TASK.Context &address
  ;)
  menuitem "Display context struct"
  (
    PRIVATE &pAddress
    &pAddress=TRACK.ADDRESS()
    Var.View %Open (struct tcs*)(&pAddress)
  )
  separator
  menuitem "Dump context entry"
  (
    PRIVATE &pAddress
    &pAddress=TRACK.ADDRESS()
    Data.dump &pAddress /Long /DIALOG
  )
)


menu "task.f"
(
  default
  ;menuitem "Display detailed"
  ;(
  ;  &address=address.offset(track.address())
  ;  TASK.Fiber &address
  ;)
  menuitem "Display fiber struct"
  (
    PRIVATE &pAddress
    &pAddress=TRACK.ADDRESS()
    Var.View %Open (struct tcs*)(&pAddress)
  )
  separator
  menuitem "Display Stack Frame"
  (
    PRIVATE &nAddress
    &nAddress=ADDRESS.OFFSET(TRACK.ADDRESS())
    Frame /Locals /Caller /TASK &nAddress
  )
  menuitem "Display Registers"
  (
    PRIVATE &nAddress
    &nAddress=ADDRESS.OFFSET(TRACK.ADDRESS())
    Register /TASK &nAddress
  )
  menuitem "Switch Context"
  (
    PRIVATE &nAddress
    &nAddress=ADDRESS.OFFSET(TRACK.ADDRESS())
    Register.TASK &nAddress
  )
  separator
  menuitem "Add to Stack Cov"
  (
    PRIVATE &nAddress
    &nAddress=ADDRESS.OFFSET(TRACK.ADDRESS())
    TASK.STacK.ADD &nAddress
  )
  menuitem "Rm from Stack Cov"
  (
    PRIVATE &nAddress
    &nAddress=ADDRESS.OFFSET(TRACK.ADDRESS())
    TASK.STacK.RM &nAddress
  )
  separator
  menuitem "Dump fiber entry"
  (
    PRIVATE &pAddress
    &pAddress=TRACK.ADDRESS()
    Data.dump &pAddress /Long /DIALOG
  )
)


menu "task.t"
(
  default
  ;menuitem "Display detailed"
  ;(
  ;  &address=address.offset(track.address())
  ;  TASK.Task &address
  ;)
  menuitem "Display task struct"
  (
    PRIVATE &address
    &address=address.offset(track.address())
    &address=task.struct(&address)
    Var.View %Open (struct k_task*)&address
  )
  separator
  menuitem "Display Stack Frame"
  (
    PRIVATE &nAddress
    &nAddress=ADDRESS.OFFSET(TRACK.ADDRESS())
    Frame /Locals /Caller /TASK &nAddress
  )
  menuitem "Display Registers"
  (
    PRIVATE &nAddress
    &nAddress=ADDRESS.OFFSET(TRACK.ADDRESS())
    Register /TASK &nAddress
  )
  menuitem "Switch Context"
  (
    PRIVATE &nAddress
    &nAddress=ADDRESS.OFFSET(TRACK.ADDRESS())
    Register.TASK &nAddress
  )
  separator
  menuitem "Add to Stack Cov"
  (
    PRIVATE &nAddress
    &nAddress=ADDRESS.OFFSET(TRACK.ADDRESS())
    TASK.STacK.ADD &nAddress
  )
  menuitem "Rm from Stack Cov"
  (
    PRIVATE &nAddress
    &nAddress=ADDRESS.OFFSET(TRACK.ADDRESS())
    TASK.STacK.RM &nAddress
  )
  separator
  menuitem "Dump task entry"
  (
    PRIVATE &pAddress
    &pAddress=TRACK.ADDRESS()
    Data.dump &pAddress /Long /DIALOG
  )
)


menu "task.dtim"
(
  default
  menuitem "Display detailed"
  (
    PRIVATE &nAddress
    &nAddress=ADDRESS.OFFSET(TRACK.ADDRESS())
    TASK.DTIMer &nAddress
  )
  menuitem "Display timer struct"
  (
    PRIVATE &pAddress
    &pAddress=TRACK.ADDRESS()
    Var.View %m %s (struct timer*)(&pAddress)
  )
  separator
  menuitem "Dump timer entry"
  (
    PRIVATE &pAddress
    &pAddress=TRACK.ADDRESS()
    Data.dump &pAddress /Long /DIALOG
  )
)

)
